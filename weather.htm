<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Weather Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        }

        body {
            min-height: 100vh;
            background: linear-gradient(135deg, #00B4DB, #0083B0);
            padding: 2rem;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 2rem;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 2rem;
        }

        .search-box {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        input {
            flex: 1;
            padding: 1rem;
            border: none;
            border-radius: 10px;
            background: #f0f0f0;
            font-size: 1rem;
        }

        button {
            padding: 1rem 2rem;
            border: none;
            border-radius: 10px;
            background: #0083B0;
            color: white;
            cursor: pointer;
            transition: background 0.3s;
        }

        button:hover {
            background: #006688;
        }

        .weather-info {
            text-align: center;
            padding: 2rem;
            border-radius: 15px;
            background: rgba(255, 255, 255, 0.8);
        }

        .location-info {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .weather-main {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: #333;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
        }

        .weather-icon {
            width: 50px;
            height: 50px;
        }

        .temp {
            font-size: 3.5rem;
            font-weight: bold;
            color: #0083B0;
            margin-bottom: 1rem;
            cursor: pointer;
        }

        .details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-top: 2rem;
        }

        .detail-item {
            padding: 1rem;
            background: rgba(0, 131, 176, 0.1);
            border-radius: 10px;
        }

        .detail-label {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 0.5rem;
        }

        .detail-value {
            font-size: 1.2rem;
            color: #333;
            font-weight: 500;
        }

        .error {
            color: #ff4444;
            text-align: center;
            margin-top: 1rem;
        }

        .forecast {
            margin-top: 2rem;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
        }

        .forecast-item {
            background: rgba(255, 255, 255, 0.8);
            padding: 1rem;
            border-radius: 10px;
            text-align: center;
        }

        .forecast-date {
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            display: none;
        }

        .favorite-btn {
            background: #ffd700;
            margin-left: 1rem;
        }

        .favorites-list {
            margin-top: 1rem;
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .favorite-chip {
            background: #f0f0f0;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .delete-favorite {
            color: #ff4444;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Weather Dashboard</h1>
        
        <div class="search-box">
            <input type="text" id="city-input" placeholder="Enter city name..." />
            <button onclick="getWeather()">Search</button>
            <button onclick="getCurrentLocation()" title="Get Current Location">üìç</button>
        </div>

        <div class="favorites-list" id="favorites-list"></div>

        <div class="loading" id="loading">Loading weather data...</div>

        <div class="weather-info" id="weather-info" style="display: none;">
            <div class="location-info">
                <div class="weather-main" id="weather-main"></div>
                <button class="favorite-btn" onclick="toggleFavorite()" id="favorite-btn">‚òÖ</button>
            </div>
            <div class="temp" id="temp" onclick="toggleTemperatureUnit()"></div>
            <div class="details">
                <div class="detail-item">
                    <div class="detail-label">Feels Like</div>
                    <div class="detail-value" id="feels-like"></div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Humidity</div>
                    <div class="detail-value" id="humidity"></div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Wind Speed</div>
                    <div class="detail-value" id="wind-speed"></div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Pressure</div>
                    <div class="detail-value" id="pressure"></div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Visibility</div>
                    <div class="detail-value" id="visibility"></div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Sunrise</div>
                    <div class="detail-value" id="sunrise"></div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Sunset</div>
                    <div class="detail-value" id="sunset"></div>
                </div>
            </div>

            <div class="forecast" id="forecast"></div>
        </div>

        <div id="error" class="error"></div>
    </div>

    <script>
        let currentCity = '';
        let useMetric = true;
        const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');

        function updateFavoritesList() {
            const favoritesList = document.getElementById('favorites-list');
            favoritesList.innerHTML = '';
            favorites.forEach(city => {
                const chip = document.createElement('div');
                chip.className = 'favorite-chip';
                chip.innerHTML = `
                    ${city}
                    <span class="delete-favorite" onclick="removeFavorite('${city}')">&times;</span>
                `;
                chip.onclick = (e) => {
                    if (!e.target.classList.contains('delete-favorite')) {
                        document.getElementById('city-input').value = city;
                        getWeather();
                    }
                };
                favoritesList.appendChild(chip);
            });
        }

        function toggleFavorite() {
            const index = favorites.indexOf(currentCity);
            if (index === -1) {
                favorites.push(currentCity);
            } else {
                favorites.splice(index, 1);
            }
            localStorage.setItem('favorites', JSON.stringify(favorites));
            updateFavoritesList();
            updateFavoriteButton();
        }

        function removeFavorite(city) {
            const index = favorites.indexOf(city);
            if (index !== -1) {
                favorites.splice(index, 1);
                localStorage.setItem('favorites', JSON.stringify(favorites));
                updateFavoritesList();
                updateFavoriteButton();
            }
        }

        function updateFavoriteButton() {
            const btn = document.getElementById('favorite-btn');
            btn.style.background = favorites.includes(currentCity) ? '#ffd700' : '#f0f0f0';
        }

        function getCurrentLocation() {
            if (navigator.geolocation) {
                document.getElementById('loading').style.display = 'block';
                navigator.geolocation.getCurrentPosition(
                    position => {
                        getWeatherByCoords(position.coords.latitude, position.coords.longitude);
                    },
                    error => {
                        document.getElementById('error').textContent = 'Unable to get location';
                        document.getElementById('loading').style.display = 'none';
                    }
                );
            } else {
                document.getElementById('error').textContent = 'Geolocation is not supported by your browser';
            }
        }

        async function getWeatherByCoords(lat, lon) {
            const apiKey = '8ebc4490be8992c590036a3518576dca';
            try {
                const response = await fetch(
                    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`
                );
                if (!response.ok) throw new Error('Weather data not available');
                const data = await response.json();
                updateWeatherUI(data);
                getForecast(lat, lon);
            } catch (error) {
                document.getElementById('error').textContent = error.message;
                document.getElementById('weather-info').style.display = 'none';
            }
            document.getElementById('loading').style.display = 'none';
        }

        function toggleTemperatureUnit() {
            useMetric = !useMetric;
            getWeather();
        }

        function convertTemp(temp) {
            return useMetric ? temp : (temp * 9/5) + 32;
        }

        function formatTemp(temp) {
            const converted = convertTemp(temp);
            return `${Math.round(converted)}¬∞${useMetric ? 'C' : 'F'}`;
        }

        async function getWeather() {
            const cityInput = document.getElementById('city-input');
            const weatherInfo = document.getElementById('weather-info');
            const errorDiv = document.getElementById('error');
            const loadingDiv = document.getElementById('loading');
            
            const apiKey = '8ebc4490be8992c590036a3518576dca';
            const city = cityInput.value.trim();

            if (!city) {
                errorDiv.textContent = 'Please enter a city name';
                weatherInfo.style.display = 'none';
                return;
            }

            loadingDiv.style.display = 'block';
            weatherInfo.style.display = 'none';
            errorDiv.textContent = '';

            try {
                const response = await fetch(
                    `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`
                );

                if (!response.ok) {
                    throw new Error('City not found');
                }

                const data = await response.json();
                updateWeatherUI(data);
                getForecast(data.coord.lat, data.coord.lon);
            } catch (error) {
                errorDiv.textContent = error.message;
                weatherInfo.style.display = 'none';
            }
            loadingDiv.style.display = 'none';
        }

        function updateWeatherUI(data) {
            currentCity = data.name;
            const weatherInfo = document.getElementById('weather-info');
            
            document.getElementById('weather-main').innerHTML = `
                ${data.weather[0].main}
                <img class="weather-icon" src="https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png" alt="${data.weather[0].description}">
            `;
            document.getElementById('temp').textContent = formatTemp(data.main.temp);
            document.getElementById('feels-like').textContent = formatTemp(data.main.feels_like);
            document.getElementById('humidity').textContent = `${data.main.humidity}%`;
            document.getElementById('wind-speed').textContent = `${data.wind.speed} m/s`;
            document.getElementById('pressure').textContent = `${data.main.pressure} hPa`;
            document.getElementById('visibility').textContent = `${(data.visibility / 1000).toFixed(1)} km`;
            document.getElementById('sunrise').textContent = new Date(data.sys.sunrise * 1000).toLocaleTimeString();
            document.getElementById('sunset').textContent = new Date(data.sys.sunset * 1000).toLocaleTimeString();

            weatherInfo.style.display = 'block';
            updateFavoriteButton();
        }

        async function getForecast(lat, lon) {
            const apiKey = '8ebc4490be8992c590036a3518576dca';
            try {
                const response = await fetch(
                    `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`
                );
                if (!response.ok) throw new Error('Forecast data not available');
                
                const data = await response.json();
                const forecastDiv = document.getElementById('forecast');
                forecastDiv.innerHTML = '';

                // Group by day and get mid-day forecasts
                const dailyForecasts = {};
                data.list.forEach(item => {
                    const date = new Date(item.dt * 1000).toLocaleDateString();
                    if (!dailyForecasts[date] && Object.keys(dailyForecasts).length < 5) {
                        dailyForecasts[date] = item;
                    }
                });

                Object.values(dailyForecasts).forEach(forecast => {
                    const date = new Date(forecast.dt * 1000);
                    const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
                    
                    const forecastItem = document.createElement('div');
                    forecastItem.className = 'forecast-item';
                    forecastItem.innerHTML = `
                        <div class="forecast-date">${dayName}</div>
                        <img src="https://openweathermap.org/img/wn/${forecast.weather[0].icon}.png" alt="${forecast.weather[0].description}">
                        <div>${formatTemp(forecast.main.temp)}</div>
                        <div>${forecast.weather[0].main}</div>
                    `;
                    forecastDiv.appendChild(forecastItem);
                });
            } catch (error) {
                console.error('Error fetching forecast:', error);
            }
        }

// Event listeners
document.getElementById('city-input').addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                getWeather();
            }
        });

        // Initialize favorites list on page load
        updateFavoritesList();

        // Load last searched city if available
        const lastCity = localStorage.getItem('lastCity');
        if (lastCity) {
            document.getElementById('city-input').value = lastCity;
            getWeather();
        }

    </script>
</body>
</html>
